// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.200703.9

#ifndef WINRT_SimpleMathComponent_0_H
#define WINRT_SimpleMathComponent_0_H
WINRT_EXPORT namespace winrt::SimpleMathComponent
{
    struct ISimpleMath;
    struct SimpleMath;
}
namespace winrt::impl
{
    template <> struct category<SimpleMathComponent::ISimpleMath>{ using type = interface_category; };
    template <> struct category<SimpleMathComponent::SimpleMath>{ using type = class_category; };
    template <> inline constexpr auto& name_v<SimpleMathComponent::SimpleMath> = L"SimpleMathComponent.SimpleMath";
    template <> inline constexpr auto& name_v<SimpleMathComponent::ISimpleMath> = L"SimpleMathComponent.ISimpleMath";
    template <> inline constexpr guid guid_v<SimpleMathComponent::ISimpleMath>{ 0xC5294299,0x09C8,0x5F7F,{ 0x9F,0xAE,0x46,0x99,0x30,0x31,0xC2,0x42 } }; // C5294299-09C8-5F7F-9FAE-46993031C242
    template <> struct default_interface<SimpleMathComponent::SimpleMath>{ using type = SimpleMathComponent::ISimpleMath; };
    template <> struct abi<SimpleMathComponent::ISimpleMath>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall add(double, double, double*) noexcept = 0;
            virtual int32_t __stdcall subtract(double, double, double*) noexcept = 0;
            virtual int32_t __stdcall multiply(double, double, double*) noexcept = 0;
            virtual int32_t __stdcall divide(double, double, double*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_SimpleMathComponent_ISimpleMath
    {
        WINRT_IMPL_AUTO(double) add(double firstNumber, double secondNumber) const;
        WINRT_IMPL_AUTO(double) subtract(double firstNumber, double secondNumber) const;
        WINRT_IMPL_AUTO(double) multiply(double firstNumber, double secondNumber) const;
        WINRT_IMPL_AUTO(double) divide(double firstNumber, double secondNumber) const;
    };
    template <> struct consume<SimpleMathComponent::ISimpleMath>
    {
        template <typename D> using type = consume_SimpleMathComponent_ISimpleMath<D>;
    };
}
#endif
